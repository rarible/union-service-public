spring:
  application:
    name: "union-search-worker"

mongock:
  change-logs-scan-package:
    - "com.rarible.protocol.union.enrichment.migration"

integration:
  ethereum:
    enabled: ${consul.ethereum.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
    auctionContracts: ${consul.ethereum.auctionContracts:}
  polygon:
    enabled: ${consul.polygon.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
    auctionContracts: ${consul.polygon.auctionContracts:}
  mantle:
    enabled: ${consul.mantle.enabled:false}
    consumer:
      broker-replica-set: ${kafka.hosts}
    auctionContracts: ${consul.mantle.auctionContracts:}
  flow:
    enabled: ${consul.flow.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
    auctionContracts: ${consul.flow.auctionContracts:}
  tezos:
    enabled: ${consul.tezos.enabled:true}
    dipdup:
      network: ${consul.tezos.dipdup.network:}
      dipdupUrl: ${consul.tezos.dipdup.dipdupUrl:}
      dipdupToken: ${consul.tezos.dipdup.dipdupToken:}
      nodeAddress: ${consul.tezos.dipdup.nodeAddress:}
      chainId: ${consul.tezos.dipdup.chainId:}
      sigChecker: ${consul.tezos.dipdup.sigChecker:}
      tzktUrl: ${consul.tezos.dipdup.tzktUrl:}
      ipfsUrl: ${consul.tezos.dipdup.ipfsUrl:"https://ipfs.io"}
      useDipDupTokens: ${consul.tezos.dipdup.useDipDupTokens:false}
      useDipDupRoyalty: ${consul.tezos.dipdup.useDipDupRoyalty:false}
      saveDipDupRoyalty: ${consul.tezos.dipdup.saveDipDupRoyalty:false}
      enrichDipDupCollection: ${consul.tezos.dipdup.enrichDipDupCollection:true}
      knownAddresses:
        hen: ${consul.tezos.dipdup.knownAddresses.hen:}
        henRoyalties: ${consul.tezos.dipdup.knownAddresses.henRoyalties:}
        kalamint: ${consul.tezos.dipdup.knownAddresses.kalamint:}
        fxhashV1: ${consul.tezos.dipdup.knownAddresses.fxhashV1:}
        fxhashV1Manager: ${consul.tezos.dipdup.knownAddresses.fxhashV1Manager:}
        fxhashV2: ${consul.tezos.dipdup.knownAddresses.fxhashV2:}
        versum: ${consul.tezos.dipdup.knownAddresses.versum:}
        royaltiesManager: ${consul.tezos.dipdup.knownAddresses.royaltiesManager:}
        bidou8x8: ${consul.tezos.dipdup.knownAddresses.bidou8x8:}
        bidou24x24: ${consul.tezos.dipdup.knownAddresses.bidou24x24:}
        dogami: ${consul.tezos.dipdup.knownAddresses.dogami:}
        dogamiGap: ${consul.tezos.dipdup.knownAddresses.dogamiGap:}
        dogamiStar: ${consul.tezos.dipdup.knownAddresses.dogamiStar:}
    client:
      url: ${consul.tezos.api.baseUrl}
    consumer:
      broker-replica-set: ${consul.tezos.kafka.hosts}
      username: ${consul.tezos.kafka.username}
      password: ${consul.tezos.kafka.password}
    auctionContracts: ${consul.tezos.auctionContracts:}
  solana:
    enabled: ${consul.solana.enabled:true}
  immutablex:
    enabled: ${consul.immutablex.enabled:false}
    client:
      url: ${consul.immutablex.api.baseUrl:}
      byIdsChunkSize: 16
    clientV3:
      url: ${consul.immutablex.api.baseUrlV3:}
      byIdsChunkSize: 16
    apiKey: ${consul.immutablex.api.key:}

worker:
  itemMetaCustomAttributesJob:
    providers:
      mocaXp:
        enabled: false
        apiKey: ${MOCA_XP_API_KEY}
  communityMarketplace:
    communityMarketplaceUrl: http://web.${application.environment}-whitelabel:8080
