application:
  project: protocol

server:
  shutdown: graceful
  port: 8080

spring:
  application.name: union-api
  jackson:
    mapper:
      ACCEPT_CASE_INSENSITIVE_ENUMS: true
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
    default-property-inclusion: non_null
  main:
    banner-mode: log
    web-application-type: reactive

rarible:
  core:
    apm:
      agent:
        enabled: true
        server: http://elk_apm-server:8200
        packages: com.rarible.protocol.union.api
      web:
        filter:
          enabled: true
      annotation:
        enabled: true
    client:
      name: rarible-protocol
  ethereum:
    converter:
      enabled: true
  loader:
    broker-replica-set: ${kafka.hosts}
    topicsPrefix: protocol.${application.environment}.union.internal.loader
    enableWorkers: false
    enableNotifications: false
    enableRetrySchedulerJob: false
protocol:
  union:
    subscriber:
      broker-replica-set: ${kafka.hosts}
api:
  openapi:
    baseUrl: "https://dev-api.rarible.org"
    description: "Development (Ropsten, Mumbai, Hangzhou)"
  subscribe:
    workers:
      item: 4
      ownership: 4

integration:
  ethereum:
    enabled: ${consul.ethereum.enabled:true}
    auctionContracts: ${consul.ethereum.auctionContracts:}
  polygon:
    enabled: ${consul.polygon.enabled:true}
    auctionContracts: ${consul.polygon.auctionContracts:}
  flow:
    enabled: ${consul.flow.enabled:true}
    auctionContracts: ${consul.flow.auctionContracts:}
  tezos:
    enabled: ${consul.tezos.enabled:true}
    dipdup:
      network: ${consul.tezos.dipdup.network:}
      dipdupUrl: ${consul.tezos.dipdup.dipdupUrl:}
      nodeAddress: ${consul.tezos.dipdup.nodeAddress:}
      chainId: ${consul.tezos.dipdup.chainId:}
      sigChecker: ${consul.tezos.dipdup.sigChecker:}
      tzktUrl: ${consul.tezos.dipdup.tzktUrl:}
      tzktProperties:
        tokenBatch: ${consul.tezos.dipdup.tzktProperties.tokenBatch:false}
        ownershipBatch: ${consul.tezos.dipdup.tzktProperties.ownershipBatch:false}
        collectionBatch: ${consul.tezos.dipdup.tzktProperties.collectionBatch:false}
      ipfsUrl: ${consul.tezos.dipdup.ipfsUrl:"https://ipfs.io"}
      knownAddresses:
        hen: ${consul.tezos.dipdup.knownAddresses.hen:}
        henRoyalties: ${consul.tezos.dipdup.knownAddresses.henRoyalties:}
        kalamint: ${consul.tezos.dipdup.knownAddresses.kalamint:}
        fxhashV1: ${consul.tezos.dipdup.knownAddresses.fxhashV1:}
        fxhashV1Manager: ${consul.tezos.dipdup.knownAddresses.fxhashV1Manager:}
        fxhashV2: ${consul.tezos.dipdup.knownAddresses.fxhashV2:}
        versum: ${consul.tezos.dipdup.knownAddresses.versum:}
        royaltiesManager: ${consul.tezos.dipdup.knownAddresses.royaltiesManager:}
        bidou8x8: ${consul.tezos.dipdup.knownAddresses.bidou8x8:}
        bidou24x24: ${consul.tezos.dipdup.knownAddresses.bidou24x24:}
        dogami: ${consul.tezos.dipdup.knownAddresses.dogami:}
        dogamiGap: ${consul.tezos.dipdup.knownAddresses.dogamiGap:}
      marketplaces:
        hen: ${consul.tezos.dipdup.marketplaces.hen:false}
        objkt: ${consul.tezos.dipdup.marketplaces.objkt:false}
        objktV2: ${consul.tezos.dipdup.marketplaces.objktV2:false}
        versum: ${consul.tezos.dipdup.marketplaces.versum:false}
        teia: ${consul.tezos.dipdup.marketplaces.teia:false}
    client:
      url: ${consul.tezos.api.baseUrl:}
    auctionContracts: ${consul.tezos.auctionContracts:}
  solana:
    enabled: ${consul.solana.enabled:false}
  immutablex:
    enabled: ${consul.immutablex.enabled:true}
    client:
      url: ${consul.immutablex.api.baseUrl:}
      byIdsChunkSize: 16
    apiKey: ${consul.immutablex.api.key:}
common:
  producer:
    broker-replica-set: ${kafka.hosts}
  currency:
    refresh:
      cron: "0 0/30 * * * *"
  feature-flags:
    enableRevertedActivityEventSending: false
    enableOwnershipSourceEnrichment: false
    enableItemLastSaleEnrichment: true
    enableLegacyWrappedEventTopic: true
meta:
  ipfsGateway: "https://ipfs.io,https://nftstorage.link"
  ipfsPublicGateway: "https://ipfs.io"
  ipfsLegacyGateway: "https://rarible.mypinata.cloud"
  mediaFetchTimeout: 10000
  mediaFetchMaxSize: 131072 # 128 Kb
  openSeaProxyUrl: ${consul.meta.openSeaProxyUrl}
  http-client:
    type: KTOR_CIO
    thread-count: 1
    time-out: 10000
    total-connection: 1000

# Disable verbose logs of Apache HTTP client used to load content media metadata.
logging:
  level:
    org.apache.http: ERROR
    org.springframework.data.elasticsearch.core.QUERY: DEBUG
