application:
  project: protocol

server:
  shutdown: graceful
  port: 8080

spring:
  application.name: union-listener
  jackson:
    mapper:
      ACCEPT_CASE_INSENSITIVE_ENUMS: true
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
    default-property-inclusion: non_null
  aop:
    proxy-target-class: false
  main:
    banner-mode: log
    web-application-type: reactive
  task:
    scheduling:
      pool:
        size: 16
mongock:
  change-logs-scan-package:
    - com.rarible.protocol.union.enrichment.migration

rarible:
  core:
    apm:
      agent:
        enabled: true
        server: http://elk_apm-server:8200
        packages: com.rarible.protocol.union.listener
      web:
        filter:
          enabled: false
      annotation:
        enabled: true
  ethereum:
    converter:
      enabled: true
  loader:
    broker-replica-set: ${kafka.hosts}
    topicsPrefix: protocol.${application.environment}.union.internal.loader
    enableWorkers: false
    enableNotifications: true # Enable notifications processor to send item update events when meta gets loaded.
    loadNotificationsTopicPartitions: 50
    enableRetrySchedulerJob: true

common:
  producer:
    broker-replica-set: ${kafka.hosts}
  currency:
    refresh:
      cron: "0 0/30 * * * *"
  feature-flags:
    enableRevertedActivityEventSending: false
    enableOwnershipSourceEnrichment: false
    enableItemLastSaleEnrichment: true
    enableNotificationOnCollectionOrders: true
    enableLegacyWrappedEventTopic: true


integration:
  ethereum:
    enabled: ${consul.ethereum.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.ethereum.auctionContracts:}
  polygon:
    enabled: ${consul.polygon.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.polygon.auctionContracts:}
  flow:
    enabled: ${consul.flow.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.flow.auctionContracts:}
  tezos:
    enabled: ${consul.tezos.enabled:true}
    dipdup:
      enabled: ${consul.tezos.dipdup.enabled:false}
      network: ${consul.tezos.dipdup.network:}
      dipdupUrl: ${consul.tezos.dipdup.dipdupUrl:}
      nodeAddress: ${consul.tezos.dipdup.nodeAddress:}
      chainId: ${consul.tezos.dipdup.chainId:}
      sigChecker: ${consul.tezos.dipdup.sigChecker:}
      tzktUrl: ${consul.tezos.dipdup.tzktUrl:}
      ipfsUrl: ${consul.tezos.dipdup.ipfsUrl:"https://ipfs.io"}
      tzktProperties:
        retryAttempts: ${consul.tezos.dipdup.tzktProperties.retryAttempts:2}
        retryDelay: ${consul.tezos.dipdup.tzktProperties.retryDelay:15000}
      knownAddresses:
        hen: ${consul.tezos.dipdup.knownAddresses.hen:}
        henRoyalties: ${consul.tezos.dipdup.knownAddresses.henRoyalties:}
        kalamint: ${consul.tezos.dipdup.knownAddresses.kalamint:}
        fxhashV1: ${consul.tezos.dipdup.knownAddresses.fxhashV1:}
        fxhashV1Manager: ${consul.tezos.dipdup.knownAddresses.fxhashV1Manager:}
        fxhashV2: ${consul.tezos.dipdup.knownAddresses.fxhashV2:}
        versum: ${consul.tezos.dipdup.knownAddresses.versum:}
        royaltiesManager: ${consul.tezos.dipdup.knownAddresses.royaltiesManager:}
        bidou8x8: ${consul.tezos.dipdup.knownAddresses.bidou8x8:}
        bidou24x24: ${consul.tezos.dipdup.knownAddresses.bidou24x24:}
      consumer:
        broker-replica-set: ${consul.tezos.dipdup.consumer.hosts:}
        username: ${consul.tezos.dipdup.consumer.username:}
        password: ${consul.tezos.dipdup.consumer.password:}
        workers:
          order: ${consul.tezos.dipdup.consumer.workers.order:1}
          activity: ${consul.tezos.dipdup.consumer.workers.activity:4}
    client:
      url: ${consul.tezos.api.baseUrl}
    pg:
      host: ${consul.tezos.pg.host:}
      port: ${consul.tezos.pg.port:}
      user: ${consul.tezos.pg.user:}
      password: ${consul.tezos.pg.password:}
      database: ${consul.tezos.pg.database:}
    consumer:
      broker-replica-set: ${consul.tezos.kafka.hosts}
      username: ${consul.tezos.kafka.username}
      password: ${consul.tezos.kafka.password}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.tezos.auctionContracts:}
    showLegacyOrders: ${consul.tezos.showLegacyOrders:false}
  solana:
    enabled: ${consul.solana.enabled:false}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts:
  immutablex:
    enabled: ${consul.immutablex.enabled:true}
    client:
      url: ${consul.immutablex.api.baseUrl:}
    apiKey: ${consul.immutablex.api.key:}
    scanner:
      job:
        fixedDelay: 5
        initialDelay:
          mints: 1
          transfers: 2
          trades: 3
          deposits: 4
          withdrawals: 5
          orders: 6

listener:
  consumer:
    broker-replica-set: ${kafka.hosts}
    workers:
      wrapped: 10
  reconciliation:
    orderBatchSize: 50
    auctionBatchSize: 50
    activityBatchSize: 100
    threadCount: 2
    notificationEnabled: false
  openSeaCleanup:
    enabled: true
    #sellOrderFrom: "2022-02-06T00:00:00.000Z"
    itemBatchSize: 100
    ownershipBatchSize: 50
  collection-statistics-resync:
    enabled: false
    rate: PT12H
    limit: 50
  price-update:
    enabled: true
    rate: PT5M
  reconcile-marks:
    enabled: true
    rate: PT15S
  meta-scheduling:
    item:
      workers: 4
      batchSize: 16
  metrics:
    root-path: "protocol.union.listener"

meta:
  ipfsGateway: "https://ipfs.io,https://nftstorage.link"
  ipfsPublicGateway: "https://ipfs.io"
  ipfsLegacyGateway: "https://rarible.mypinata.cloud"
  mediaFetchTimeout: 10000
  mediaFetchMaxSize: 131072 # 128 Kb
  openSeaProxyUrl: ${consul.meta.openSeaProxyUrl}
  http-client:
    type: KTOR_CIO # KTOR_APACHE, KTOR_CIO
    thread-count: 1
    time-out: 10000
    total-connection: 1000

# Disable verbose logs of Apache HTTP client used to load content media metadata.
logging:
  level:
    org.apache.http: ERROR
